#parse("include/init_var.vm")
//
// GENERATED CODE DO NOT UPDATE
// Telosys Template : csharp-backend / Controller / Xxxcontroller.vm
// C# class for entity "${entity.name}" 
// Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
// Generated by $generator.name ( version $generator.version )
//
$env.setLanguage('C#')
using Microsoft.AspNetCore.Mvc;
using ${NAMESPACE}.Models;
using ${NAMESPACE}.ViewModels;
##--------------------------------------------------------------------------------------------------------
## Key fields = fields in Primary Key    
#set( $keyFields = $entity.getAttributesByCriteria( $const.KEY ) )
##--------------------------------------------------------------------------------------------------------
## Link fields = fields not in Primary Key and used as FK in selected Links    
#set( $linkFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.IN_SELECTED_LINKS ) )
##--------------------------------------------------------------------------------------------------------
#set( $int = [ "int", "int32", "int64" ] )
#set( $string = "string")
#set( $name = $fn.uncapitalize($entity.name) )
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS ) )
#set( $keyFields = $entity.getAttributesByCriteria( $const.KEY ) )
##--------------------------------------------------------------------------------------------------------

namespace ${NAMESPACE}.Controllers
{
    [Route("api/v1/[controller]")]
    [ApiController]
	public class ${entity.name}Controller : ControllerBase
	{
		private EntitiesDbContext _context { get; set; }		

		public ${entity.name}Controller()
		{
			_context = new EntitiesDbContext();
		}

        // GET LIST by GET request with no url arg
		// GET: api/v1/${entity.name}/Get${entity.name}s
        // OPENAPI OperationId = Get${entity.name}s
        [HttpGet(Name="Get${entity.name}s")]
		public IEnumerable<${entity.name}> Get${entity.name}s()
		{
			var lstResult = _context.${entity.name}s.ToList();
			return lstResult;
		}
		
        // READ by GET request with url arg for ID
        // GET api/v1/${entity.name}/Get${entity.name}/5
        // OPENAPI OperationId = Get${entity.name}
        // Data in result
        [HttpGet("Get${entity.name}/{${keyFields[0].formattedName(0)}}", Name="${entity.name}")]
        public ${entity.name} GetTodoItem(${keyFields[0].formattedType(0)} ${keyFields[0].formattedName(0)})
        {
            ${entity.name}? ReadData = _context.${entity.name}s.FirstOrDefault(item => item.${keyFields[0].formattedName(0)} == ${keyFields[0].formattedName(0)});
            return ReadData;
        }

        // CREATE by POST request
        // POST api/v1/${entity.name}/Create${entity.name}
        // OPENAPI OperationId = Create${entity.name}
        // Data in BODY
        [HttpPost("Create${entity.name}",Name="Create${entity.name}")]
        public void Create${entity.name}([FromBody]${entity.name}CreateViewModel createVM)
        {
				var ToCreate = new ${entity.name}();

				// KEYS
#foreach( $attribute in $entity.keyAttributes )	  
#if( ${fn.uncapitalize($attribute.formattedType(0))} == $string)
				ToCreate.${attribute.formattedName(0)} = Guid.NewGuid().ToString();
#end
#end
				// DATAS
#foreach( $attribute in $entity.nonKeyAttributes)
				ToCreate.${attribute.name} = createVM.${attribute.name};
#end
				// SAVE
				_context.${entity.name}s.Add( ToCreate );
				_context.SaveChangesAsync();
        }

        // UPDATE by PUT request
        // PUT api/v1/${entity.name}/Update${entity.name}/5
        // OPENAPI OperationId = Update${entity.name}
        // Data in BODY
        [HttpPut("Update${entity.name}/{${keyFields[0].formattedName(0)}}",Name="Update${entity.name}")]
        public void Update${entity.name}(${keyFields[0].formattedType(0)} ${keyFields[0].formattedName(0)}, [FromBody]${entity.name}UpdateViewModel updateVM)
        {
			var ToUpdate${entity.name} = _context.${entity.name}s.FirstOrDefault(x => x.${keyFields[0].formattedName(0)} == updateVM.${keyFields[0].formattedName(0)});
			if(ToUpdate${entity.name} != null)
			{
				// KEYS
#foreach ( $attribute in $keyFields )
				ToUpdate${entity.name}.${attribute.name} = updateVM.${attribute.name};
#end
				// DATAS
#foreach( $attribute in $entity.nonKeyAttributes)
				ToUpdate${entity.name}.${attribute.name} = updateVM.${attribute.name};
#end
				// SAVE
				await _context.SaveChangesAsync();
			}
        }

        // DELETE by DELETE request with url arg for ID
        // DELETE api/v1/${entity.name}/Delete${entity.name}/5
        // OPENAPI OperationId = Delete${entity.name}
        [HttpDelete("Delete${entity.name}/{${keyFields[0].formattedName(0)}}", Name = "Delete${entity.name}")]
        public void Delete(${keyFields[0].formattedType(0)} ${keyFields[0].formattedName(0)})
        {
			var ToDelete = _context.${entity.name}s.FirstOrDefault(x => x.${keyFields[0].formattedName(0)} == ${keyFields[0].formattedName(0)});
			if(ToDelete != null)
			{
				_context.${entity.name}s.Remove(ToDelete);
				_context.SaveChangesAsync();
			}
        }
	}
}
